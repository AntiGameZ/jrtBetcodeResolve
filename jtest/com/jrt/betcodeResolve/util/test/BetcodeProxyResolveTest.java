package com.jrt.betcodeResolve.util.test;

import java.util.Vector;

import org.junit.Assert;
import org.junit.Test;

import com.jrt.betcodeResolve.util.BetcodeProxyResolve;
import com.jrt.betcodeResolve.util.BetcodeRequestUtil;

/**
 * 
 * 		注码解析代理类测试
 * 		彩种包括双色球、福彩3D、七乐彩、排列三、大乐透
 * @author 
 * 		徐丽
 * 
 */
public class BetcodeProxyResolveTest {
	
    /**
	 * 解析双色球注码存入vector测试
	 */
    @SuppressWarnings("unchecked")
	@Test
	public void getSSQVectorTest() {
		String betcode = "2,1,3,5,4,6+1^1,1,3,5,4,6+2^" 
			+ "7,10,8,12,9,11+3^1,6,15,26,32,2+4^"
			+ "1,6,15,26,32,2+5^1,6,15,26,32,2+6^"
		    + "7,10,8,12,9,11+7^1,6,15,26,32,2+8^"
			+ "1,6,15,26,32,2+9^1,6,15,26,32,2+10^" 
			+"1,6,15,26,32,2+10^" //单式-红单蓝单
			+ "1,6,2,5,3,4,9,7,8,10+1^" //红复蓝单
			+ "11,2,6,3,4,5+1,3,2^" //红单蓝复
			+ "1,5,2,3,9,4,6,7+1,3,2^"//红复蓝复
			+ "1,4,2,3*5,9,7,16+1^" //红胆拖蓝单
			+ "1,2,4,3*5,7,9,6+1,3,2^"//红胆拖蓝复
			;
		Vector vector =  BetcodeProxyResolve.getSSQVector(betcode, "^", "+", ",","*");
		Assert.assertEquals("[2,1,3,5,4,6+1^1,1,3,5,4,6+2^7,10,8,12,9,11+3^1,6,15,26,32,2+4^1,6,15,26,32,2+5^, "
		 +"1,6,15,26,32,2+6^7,10,8,12,9,11+7^1,6,15,26,32,2+8^1,6,15,26,32,2+9^1,6,15,26,32,2+10^, "
		 +"1,6,15,26,32,2+10^, 1,2,4,3*5,7,9,6+1,3,2^]", vector.toString());
		
		BetcodeRequestUtil.requestJrtLotBetcode(betcode, 1, "^", "+", ",","*");
	}

    /**
	 * 解析福彩3D注码存入vector测试
	 */
	@Test
	public void getSDVectorTest(){
		String betcode = "001,3,2^001,2,2^001,3,2^001,2,2^001,3,2^001,2,2^"//直选单式 
			+ "011,3,2^011,2,2^014,5,6^017,9,8^" //组三单式
			+ "021,2,2^024,5,6^027,9,8^" //组六单式
			+ "1020^" //直选和值 
			+ "1120^" //组三和值
			+ "1220^" //组六和值
			+ "201,4,2,3,5*6,9,7,8,10,0*1,5,2,3,4,6,7^"//直选复式（单选按位包号）
			+ "312,3,8,4,9,6,7^"//组三复式
			+ "322,3,8,4,9,6,7^"//组六复式
			+ "343,6,7,8,4,5^"//单选单复式（直选包号）
			+ "542,1*5,4,3^" //胆拖复式(单选单胆拖)
			;
		Vector<String> vector = BetcodeProxyResolve.getSDVector(betcode, "^");
		Assert.assertEquals("[001,3,2^001,2,2^001,3,2^001,2,2^001,3,2^, " +
				"001,2,2^, 011,3,2^011,2,2^014,5,6^017,9,8^, " +
				"021,2,2^024,5,6^027,9,8^, 1020^, 1120^, 1220^, " +
				"201,4,2,3,5*6,9,7,8,10,0*1,5,2,3,4,6,7^, " +
				"312,3,8,4,9,6,7^, 322,3,8,4,9,6,7^, 343,6,7,8,4,5^, 542,1*5,4,3^]", vector.toString());
	}
	
	/**
	 * 解析七乐彩注码存入vector测试
	 */
	@Test
	public void getQLCVectorTest(){
		String betcode = "1,7,2,6,3,4,5^8,13,9,10,11,12,14^" 
			+ "15,20,16,17,18,19,21^22,24,23,25,26,27,28^" 
			+ "32,29,30,31,33,34,35^22,24,23,25,26,27,28^" //单式
			+ "1,7,2,6,3,4,5,8,9,10^" //复式
			+ "1,3,2*4,6,8,7,5,9,10^" //胆拖
			;
		Vector<String> vector = BetcodeProxyResolve.getQLCVector(betcode, "^", ",", "*");
		Assert.assertEquals("[1,7,2,6,3,4,5^8,13,9,10,11,12,14^15,20,16,17,18,19,21^22,24,23,25,26,27,28^32,29,30,31,33,34,35^, " +
				"22,24,23,25,26,27,28^, 1,7,2,6,3,4,5,8,9,10^, 1,3,2*4,6,8,7,5,9,10^]", vector.toString());
	}
	
	/**
	 * 解析大乐透注码存入vector测试
	 */
	@Test
	public void getDLTVectorTest(){
		String betcode = "1,15,4,5,6+1,7^1,15,4,5,6+1,7^1,15,4,5,6+1,7^" 
						+"1,15,4,5,6+1,7^1,15,4,5,6+1,7^1,15,4,5,6+1,7^" //单式
						+ "1,2,15,4,5,6+1,7,2^" //复式
						+ "1,2$3,4,5,6,7,8,9+1$2,3^" //胆拖
						+ "1,2^"//十二选二单式
						+ "1,2,3,4"//十二选二复式
						;
		Vector<String> vector = BetcodeProxyResolve.getDLTVector(betcode, "^", "+", ",", "$");
		Assert.assertEquals("[1,15,4,5,6+1,7^1,15,4,5,6+1,7^1,15,4,5,6+1,7^1,15,4,5,6+1,7^1,15,4,5,6+1,7^," +
				" 1,15,4,5,6+1,7^, 1,2,15,4,5,6+1,7,2^, " +
				"1,2$3,4,5,6,7,8,9+1$2,3^, 1,2^, 1,2,3,4^]", vector.toString());
	}
	
	/**
	 * 解析排列三注码存入vector测试
	 */
	@Test
	public void getPLSVectorTest(){
		String betcode = "011,3,2;011,2,2;011,3,2;011,2,2;011,3,2;011,2,2;"//直选单式 
			+ "061,3,3;061,2,2;061,2,2;064,5,6;067,9,8;" //组选单式
			+ "S120;" //直选和值 
			+ "S920;" //组选和值
			+ "S320;" //组三和值
			+ "S620;" //组六和值
			+ "F32,3,8,4,9,6,7;"//组三包号
			+ "F62,3,8,4,9,6,7;"//组六包号
			;
		Vector<String> vector = BetcodeProxyResolve.getPLSVector(betcode, ";","-");
		Assert.assertEquals("[011,3,2;011,2,2;011,3,2;011,2,2;011,3,2;, " +
				"011,2,2;, 061,3,3;061,2,2;061,2,2;064,5,6;067,9,8;, " +
				"S120;, S920;, S320;, S620;, F32,3,8,4,9,6,7;, " +
				"F62,3,8,4,9,6,7;]", vector.toString());
	}
	
	/**
	 * 解析排列五注码存入vector中的测试方法
	 */
	@Test
	public void getPLWVectorTest(){
	  String betcode = "1,2,3,5,6;4,5,6,7,8;2,4,5,6,9;2,4,5,6,9;2,4,5,6,9;2,4,5,6,9;2,4,5,6,9;" +//单式
	  		"1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;1,2,8-0,2,3-1,2,8-0,2,3-3,4,9";	//复式
	  Vector<String> vector = BetcodeProxyResolve.getPLWVector(betcode, ";", "-");
	  Assert.assertEquals("[1,2,3,5,6;4,5,6,7,8;2,4,5,6,9;2,4,5,6,9;2,4,5,6,9;, " +
	  		"2,4,5,6,9;2,4,5,6,9;, " +
	  		"1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;, " +
	  		"1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;]", vector.toString());
	}
	
	/**
	 * 解析七星彩注码存入vector中的测试方法
	 */
	@Test
	public void getQXCVectorTest(){
		  String betcode = "1,2,3,5,6,3,4;4,5,6,7,8,5,6;2,4,5,6,9,5,6;2,4,5,6,9,5,6;2,4,5,6,9,5,6;2,4,5,6,9,5,6;" +//单式
	  		"1,2-3-2,1,2-5,0-3-7,8,2,4-6,8,3,4,9,0;1,2-3-2,1,2-5,0-3-7,8,2,4-6,8,3,4,9,0";	//复式
	  Vector<String> vector = BetcodeProxyResolve.getQXCVector(betcode, ";", "-");
	  Assert.assertEquals("[1,2,3,5,6,3,4;4,5,6,7,8,5,6;2,4,5,6,9,5,6;2,4,5,6,9,5,6;2,4,5,6,9,5,6;, " +
	  		"2,4,5,6,9,5,6;, " +
	  		"1,2-3-2,1,2-5,0-3-7,8,2,4-6,8,3,4,9,0;, " +
	  		"1,2-3-2,1,2-5,0-3-7,8,2,4-6,8,3,4,9,0;]", vector.toString());
	}
	
	/**
	 * 解析时时彩注码存入vector中的测试方法
	 */
	@Test
	public void getSSCVectorTest(){
		String betcode = "5D1,2,3,5,6;5D4,5,6,7,8;5D2,4,5,6,9;5D2,4,5,6,9;5D2,4,5,6,9;5D2,4,5,6,9;"// 五星单式
						+ "5T1,2,3,5,6;5T4,5,6,7,8;5T2,4,5,6,9;"// 五星通选单式
						+ "3D5,1,8;3D9,5,6;3D6,7,8;3D5,6,9;"// 三星单式
						+ "2D1,8;2D5,6;2D7,8;2D6,9;"// 二星单式
						+ "1D8;1D6;1D8;1D9;"// 一星单式
						+ "DD1,2;"// 大小单双单式
						+ "H25;"//二星直选和值（1-8个）
						+ "S25;"//二星组选和值（1-8个）
						+ "F25;"//二星组选复式（3-7个）						
						+ "5D1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;"//五星直选复式
						+ "5T1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;"// 五星通选复式
						+ "DD1,2,4-1,2;"// 大小单双
						+ "3D1,2,5-1,3-8,4;"// 三星直选复式
						+ "2D1,2,5-1,3;"// 二星直选复式
						+ "1D1,2,5;"// 一星直选复式
						;
		 Vector<String> vector = BetcodeProxyResolve.getSSCVector(betcode, ";", "-",",");
		 Assert.assertEquals("[5D1,2,3,5,6;5D4,5,6,7,8;5D2,4,5,6,9;5D2,4,5,6,9;5D2,4,5,6,9;, " +
		 		"5D2,4,5,6,9;, 3D5,1,8;3D9,5,6;3D6,7,8;3D5,6,9;, " +
		 		"2D1,8;2D5,6;2D7,8;2D6,9;, 1D8;1D6;1D8;1D9;, " +
		 		"5T1,2,3,5,6;5T4,5,6,7,8;5T2,4,5,6,9;, DD1,2;, " +
		 		"H25;, S25;, F25;, 5D1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;, " +
		 		"5T1,2,8-0,2,3-1,2,8-0,2,3-3,4,9;, DD1,2,4-1,2;, " +
		 		"3D1,2,5-1,3-8,4;, 2D1,2,5-1,3;, 1D1,2,5;]", vector.toString());
	}
	/**
	 * 解析足彩注码存入vector中的测试方法
	 */
	@Test
	public void getZCVectorTest(){
		String betcode = "1103,1,0,1,3,1,1,3,1,3,1,1,1,3;1103,1,0,1,3,1,1,3,1,3,1,1,1,3;1103,1,0,1,3,1,1,3,1,3,1,1,1,3;"
						+ "1103,1,0,1,3,1,1,3,1,3,1,1,1,3;1103,1,0,1,3,1,1,3,1,3,1,1,1,3;" 
						+ "1103,1,0,1,3,1,1,3,1,3,1,1,1,3;"//胜负彩14场单式
						+ "11131,10,0,1,3,1,1,3,1,3,1,1,1,3;"//胜负彩14场复式
						+ "1903,#,0,1,#,1,#,3,#,3,#,1,1,3;"//任九场单式
						+ "19131,10,#,1,#,1,#,3,#,3,1,#,1,3;"//任九场复式
						+ "1920,#,#,#,#,31,#,#,#,#,#,#,#,#$#,1,0,1,#,#,1,#,3,3,03,#,1,#;"//任九场胆拖
						+ "1603,1,0,1,3,1,1,3,1,3,1,1;"//足彩六场半全场单式
						+ "16130,1,03,01,3,1,1,3,1,3,1,1;"//足彩六场半全场复式
						+ "1803,1,0,1,3,1,1,3;"//足彩进球彩单式
						+ "18130,1,03,01,3,1,1,3;"//足彩进球彩复式
			;
		
		Vector<String> vector = BetcodeProxyResolve.getZCVector(betcode, ";", "," ,"#");
		Assert.assertEquals("[3,1,0,1,3,1,1,3,1,3,1,1,1,3;3,1,0,1,3,1,1,3,1,3,1,1,1,3;3,1,0,1,3,1,1,3,1,3,1,1,1,3;3,1,0,1,3,1,1,3,1,3,1,1,1,3;3,1,0,1,3,1,1,3,1,3,1,1,1,3;, " +
				"3,1,0,1,3,1,1,3,1,3,1,1,1,3;, 3,1,0,1,3,1,1,3;, 3,1,0,1,3,1,1,3,1,3,1,1;, " +
				"31,10,0,1,3,1,1,3,1,3,1,1,1,3;, 3,#,0,1,#,1,#,3,#,3,#,1,1,3;, " +
				"31,10,#,1,#,1,#,3,#,3,1,#,1,3;, " +
				"0,#,#,#,#,31,#,#,#,#,#,#,#,#$#,1,0,1,#,#,1,#,3,3,03,#,1,#;, " +
				"30,1,03,01,3,1,1,3,1,3,1,1;, 30,1,03,01,3,1,1,3;]", vector.toString());
	}
	
	@Test
	public void getSYXWVectorTest(){
		//任选1-8
		String betcode = "R11;R11;R11;R11;R11;R11;R11;" +
				"R11,2,3,4,5,6;" +
  		"R21,2;R21,2;R21,2;R21,10;" +
  		"R21,2,3,4;" +
  		"R31,2,3;R31,2,3;R31,2,3;R31,2,3;R31,2,3;" +
  		"R31,2,3;" +
  		"R41,2,3,4;R41,2,3,4,5,6,7;" +
  		"R51,2,3,4,5;R51,2,3,4,5,6,9,10;" +
  		"R61,2,3,4,5,6;R61,2,3,4,5,6,7,8;" +
  		"R71,2,3,4,5,6,7;R71,2,3,4,5,6,7,8;" +
  		"R81,2,3,4,5,6,7,8;R81,2,3,4,5,6,7,8;" +
  		//前二和前三组选
  		"Z24,10;Z24,10;Z24,10;Z24,10;Z24,10;" +
  		"Z21,2,3,4,5,6,7,8;" +
  		"Z31,7,10;Z31,7,10;Z31,7,10;Z31,7,10;" +
  		"Z31,2,3,4,5,6,7,8,9;"+
  		//胆拖
		"R21$5,8,10;R31$5,8,10;" +
		"R41,2$5,6,7,8,10;R51,2$5,6,7,8,10;" +
		"R61,2$5,6,7,8,10;R71,2$5,6,7,8,10,11;" +
		"R81,2,3,5,6,7,8$10,11;" +
		"Z21$5,8,10;Z31$5,6,7,8,10;"+
		//前二和前三直选
		"Q22-8;Q22-8;Q22-8;Q22-8;Q22-8;Q22-8;" +
		"Q21,2,3,4,5-8,9;" +
		"Q36-9-10;Q36-9-10;Q36-9-10;Q36-9-10;Q36-9-10;" +
		"Q31,4,6-5,8,9-7,10,11;";
		Vector<String> vector = BetcodeProxyResolve.getSYXWVector(betcode, ";", ",", "$", "-");
		Assert.assertEquals("[R11;R11;R11;R11;R11;, R11;R11;, " +//任选1-8
				"R21,2;R21,2;R21,2;R21,10;, R31,2,3;R31,2,3;R31,2,3;R31,2,3;R31,2,3;, " +
				"R31,2,3;, R41,2,3,4;, R51,2,3,4,5;, R61,2,3,4,5,6;, R71,2,3,4,5,6,7;, " +
				"R11,2,3,4,5,6;, R21,2,3,4;, R41,2,3,4,5,6,7;, " +
				"R51,2,3,4,5,6,9,10;, R61,2,3,4,5,6,7,8;, R71,2,3,4,5,6,7,8;, " +
				"R81,2,3,4,5,6,7,8;R81,2,3,4,5,6,7,8;, " +
				"Q22-8;Q22-8;Q22-8;Q22-8;Q22-8;, Q22-8;, " +//前二和前三直选
				"Q36-9-10;Q36-9-10;Q36-9-10;Q36-9-10;Q36-9-10;, " +
				"Z24,10;Z24,10;Z24,10;Z24,10;Z24,10;, " +//前二和前三组选
				"Z31,7,10;Z31,7,10;Z31,7,10;Z31,7,10;, " +
				"Z21,2,3,4,5,6,7,8;, " +
				"Z31,2,3,4,5,6,7,8,9;, " +
				//胆拖
				"R21$5,8,10;, R31$5,8,10;, R41,2$5,6,7,8,10;, R51,2$5,6,7,8,10;, " +
				"R61,2$5,6,7,8,10;, R71,2$5,6,7,8,10,11;, R81,2,3,5,6,7,8$10,11;, Z21$5,8,10;, " +
				"Z31$5,6,7,8,10;, Q21,2,3,4,5-8,9;, Q31,4,6-5,8,9-7,10,11;]", vector);
	}
}
